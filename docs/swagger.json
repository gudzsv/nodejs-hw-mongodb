{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Contacts app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is documentation of contacts app"
  },
  "servers": [
    {
      "url": "http://localhost:8080"
    },
    {
      "url": "https://example.com/api/v1"
    }
  ],
  "tags": [
    {
      "name": "Contacts",
      "description": "Operations with contacts."
    },
    {
      "name": "Auth",
      "description": "Operation with authentication"
    }
  ],
  "paths": {
    "/contacts": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create a new contact",
        "operationId": "createContact",
        "description": "**Create a new contact**\n\nThis endpoint allows users to create a new contact with the following details:\n\n- **Required fields:**\n  - **Name**: The contact's full name.\n  - **Phone Number**: The contact's phone number, including country code if necessary.\n  - **Contact Type**: The type of contact (e.g., work, home, personal).\n\n- **Optional fields:**\n  - **Email**: The contact's email address.\n  - **Is Favorite**: A flag indicating whether the contact is marked as a favorite.\n  - **Photo**: An optional file for the contact's photo (should be in image format).\n\nEnsure that all required fields are provided to successfully create a contact. Optionally, you may include additional information to enrich the contact's details.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "phoneNumber",
                  "contactType"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The full name of the contact.",
                    "example": "Nik Brook"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "description": "The contact's phone number, including country code if necessary.",
                    "example": "+38000000899"
                  },
                  "email": {
                    "type": "string",
                    "description": "The contact's email address. This is optional.",
                    "example": "nik@example.com"
                  },
                  "isFavorite": {
                    "type": "boolean",
                    "description": "Indicates whether the contact is marked as a favorite.",
                    "example": false
                  },
                  "contactType": {
                    "type": "string",
                    "description": "The type of the contact. It can be 'work', 'home', or 'personal'.",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ],
                    "example": "personal"
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "An optional file for the contact's photo. It should be in image format."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a contact!"
                    },
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/contact"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "createdAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2024-08-29T20:39:40.775Z"
                            },
                            "updatedAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2024-08-29T20:39:40.775Z"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "BadRequestError"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "field": {
                                "type": "string",
                                "description": "The specific field with an error.",
                                "example": "name"
                              },
                              "error": {
                                "type": "string",
                                "description": "Detailed error message regarding the validation issue.",
                                "example": "'name' is a required field"
                              }
                            },
                            "required": [
                              "field",
                              "error"
                            ],
                            "additionalProperties": false
                          },
                          {
                            "type": "object",
                            "properties": {
                              "field": {
                                "type": "string",
                                "description": "The specific field with an error.",
                                "example": "phoneNumber"
                              },
                              "error": {
                                "type": "string",
                                "description": "Detailed error message regarding the validation issue.",
                                "example": "'phoneNumber' is a required field"
                              }
                            },
                            "required": [
                              "field",
                              "error"
                            ],
                            "additionalProperties": false
                          },
                          {
                            "type": "object",
                            "properties": {
                              "field": {
                                "type": "string",
                                "description": "The specific field with an error.",
                                "example": "contactType"
                              },
                              "error": {
                                "type": "string",
                                "description": "Detailed error message regarding the validation issue.",
                                "example": "'contactType' is a required field"
                              }
                            },
                            "required": [
                              "field",
                              "error"
                            ],
                            "additionalProperties": false
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required or token invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "UnauthorizedError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "User not authorized"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "examples": {
                  "no_token": {
                    "summary": "User not authorized",
                    "value": {
                      "status": 401,
                      "message": "UnauthorizedError",
                      "data": {
                        "message": "User not authorized"
                      }
                    }
                  },
                  "token_expired": {
                    "summary": "Access token expired",
                    "value": {
                      "status": 401,
                      "message": "UnauthorizedError",
                      "data": {
                        "message": "Access token expired"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found Error - Session or Authorization header not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Session not found"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "examples": {
                  "no_token": {
                    "summary": "Session not found",
                    "value": {
                      "status": 404,
                      "message": "NotFoundError",
                      "data": {
                        "message": "Session not found"
                      }
                    }
                  },
                  "token_expired": {
                    "summary": "Authorization header not found",
                    "value": {
                      "status": 404,
                      "message": "NotFoundError",
                      "data": {
                        "message": "Authorization header not found"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{contactId}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get contact by id",
        "operationId": "getContact",
        "description": "Get contact by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "66cb5f4d0318528063e77c98"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get contact by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contact with id 66cb5f4d0318528063e77c98!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User registration",
        "operationId": "registerUser",
        "description": "Register a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "example": "User One"
                  },
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "userone@example.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "123Qwe!xX"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login in",
        "operationId": "loginUser",
        "description": "Login a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "userone@example.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "123Qwe!xX"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in an user!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "rq+GxElZ5o1qmL42xcxm+77ijgXajMg34lLc23My"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "contact": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "phoneNumber",
          "contactType",
          "userId"
        ],
        "properties": {
          "name": {
            "description": "Contact's name",
            "type": "string",
            "example": "Nik Brook"
          },
          "phoneNumber": {
            "description": "Contacts's age",
            "type": "string",
            "example": "+38000000899"
          },
          "email": {
            "description": "Contact's email",
            "type": "string",
            "example": "nik@example.com"
          },
          "isFavorite": {
            "description": "Whether is contact in Favorite",
            "type": "boolean",
            "example": false
          },
          "contactType": {
            "description": "Contact's type",
            "type": "string",
            "enum": [
              "work",
              "home",
              "personal"
            ],
            "example": "personal"
          },
          "userId": {
            "description": "Contact's user Id",
            "type": "string",
            "example": "66cb5ed80318528063e77c87"
          },
          "photo": {
            "description": "Link to contact's photo",
            "type": "string",
            "example": "https://res.cloudinary.com/dg5fttpzf/image/upload/v1724604273/vnytdl8f8xwylaaaud6b.jpg"
          },
          "_id": {
            "description": "Contact's id",
            "type": "string",
            "example": "66cb5f4d0318528063e77c98"
          }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "message": {
                  "type": "string",
                  "example": "Successfully registered a user!"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "_id",
                    "name",
                    "email",
                    "createdAt",
                    "updatedAt"
                  ],
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "66cf9e011ecc457ea69ab77d"
                    },
                    "name": {
                      "type": "string",
                      "example": "User One"
                    },
                    "email": {
                      "type": "string",
                      "example": "userone@mail.com"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-08-28T22:00:33.657Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-08-28T22:00:33.657Z"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "400": {
        "description": "Bad Request error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message",
                    "errors"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Bad request, body parameters are incorrect"
                    },
                    "errors": {
                      "type": "string",
                      "example": "name is required"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "oneOf": [
                    {
                      "properties": {
                        "data": {
                          "properties": {
                            "message": {
                              "example": "User not authorized"
                            }
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "data": {
                          "properties": {
                            "message": {
                              "example": "Access token expired"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "NotFound error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Entity not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}